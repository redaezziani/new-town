generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model resetPasswordRequest {
  id        String    @id @default(uuid()) @db.VarChar(36)
  token     Int    @unique
  expires   DateTime
  userId    String    @unique @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      users     @relation(fields: [userId], references: [id])
}

model userVerificationRequest {
  id        String    @id @default(uuid()) @db.VarChar(36)
  token     String    @unique
  expires   DateTime
  userId    String    @unique @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      users     @relation(fields: [userId], references: [id])
}


model users {
  id           String                   @id @default(uuid()) @db.VarChar(36)
  email        String                   @unique
  name         String?
  password     String
  role         String                   @default("user")
  image        String?                  @default("")
  isVerified   Boolean                  @default(false)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @default(now()) @updatedAt
  resetRequest resetPasswordRequest?
  verification userVerificationRequest?
  Notification Notification[]
  Order        Order[]
  products     products[]
  OrderItem    OrderItem[]
  @@index([email], map: "idx_user_email") 
  @@index([name], map: "idx_user_name")
}

enum NotificationType {
  INFO
  WARNING
  ERROR
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  NONE
}

model Notification {
  id        String    @id @default(uuid()) @db.VarChar(36)
  title     String
  message   String
  type      NotificationType @default(INFO)
  action    ActionType @default(NONE)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      users     @relation(fields: [userId], references: [id])
}

enum OrderItemStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}
model Order {
  id        String    @id @default(uuid()) @db.VarChar(36)
  userId    String
  name      String
  address   String
  phone     String
  email     String
  status    OrderItemStatus @default(PENDING)
  total     Float
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem OrderItem[]
}

model OrderItem {
  id        String    @id @default(uuid()) @db.VarChar(36)
  orderId   String
  productId String
  quantity  Int
  price     Float
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum currency {
  USD
  EUR
  MAD
  AED
  SAR
  QAR
  KWD
  BHD
  OMR
}

model products {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String
  description String
  price       Float
  userId      String
  image       String @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  currency    currency @default(USD)
  OrderItem   OrderItem[]
  user        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}